Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport numpy as np\r\n\r\n# Example: Simulated stock data for 5 days\r\ndata = {\r\n    'Date': ['2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05'],\r\n    'Open': [100, 105, 110, 107, 113],\r\n    'High': [102, 108, 112, 109, 115],\r\n    'Low': [99, 104, 108, 105, 111],\r\n    'Close': [101, 107, 111, 108, 114],\r\n    'Volume': [1000, 1500, 1200, 1300, 1100]\r\n}\r\n\r\n# Create DataFrame\r\ndf = pd.DataFrame(data)\r\n\r\n# Convert the 'Date' column to datetime type for better analysis\r\ndf['Date'] = pd.to_datetime(df['Date'])\r\n\r\n# Calculate the 5-day Moving Average (simple moving average)\r\ndf['SMA_5'] = df['Close'].rolling(window=5).mean()\r\n\r\n# Example of basic analysis: calculating the daily price change\r\ndf['Price Change'] = df['Close'] - df['Open']\r\n\r\n# Print the DataFrame\r\nprint(df)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 131d59a2e19556f1ca591520db17a5c2fac164d5)
+++ b/main.py	(date 1737641103097)
@@ -1,27 +1,61 @@
-import pandas as pd
-import numpy as np
+import websocket
+import json
+
+APP_ID = "67311"  # Replace with your App ID
+API_TOKEN = "rnDUBYw5v4gz4Ge"  # Replace with your valid API token
+URL = f"wss://ws.binaryws.com/websockets/v3?app_id={APP_ID}"
 
-# Example: Simulated stock data for 5 days
-data = {
-    'Date': ['2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05'],
-    'Open': [100, 105, 110, 107, 113],
-    'High': [102, 108, 112, 109, 115],
-    'Low': [99, 104, 108, 105, 111],
-    'Close': [101, 107, 111, 108, 114],
-    'Volume': [1000, 1500, 1200, 1300, 1100]
-}
+
+def on_message(ws, message):
+    """Handles incoming messages from the WebSocket."""
+    data = json.loads(message)
+    print("Received:", json.dumps(data, indent=4))
+
+    if "error" in data:
+        print("Error:", data["error"]["message"])
+    elif "authorize" in data:
+        print("Authorization successful!")
+        # After successful authorization, request the balance
+        balance_request = {
+            "balance": 1,
+            "subscribe": 1  # Subscribe to real-time updates
+        }
+        ws.send(json.dumps(balance_request))
+        print("Balance request sent.")
+    elif "balance" in data:
+        print(f"Account Balance: {data['balance']['balance']} {data['balance']['currency']}")
 
-# Create DataFrame
-df = pd.DataFrame(data)
 
-# Convert the 'Date' column to datetime type for better analysis
-df['Date'] = pd.to_datetime(df['Date'])
+def on_error(ws, error):
+    """Handles WebSocket errors."""
+    print("Error occurred:", error)
 
-# Calculate the 5-day Moving Average (simple moving average)
-df['SMA_5'] = df['Close'].rolling(window=5).mean()
 
-# Example of basic analysis: calculating the daily price change
-df['Price Change'] = df['Close'] - df['Open']
+def on_close(ws, close_status_code, close_msg):
+    """Handles WebSocket closure."""
+    print("WebSocket connection closed.")
 
-# Print the DataFrame
-print(df)
+
+def on_open(ws):
+    """Handles WebSocket connection opening."""
+    print("WebSocket connected.")
+
+    # Authorize with your API Token
+    auth_request = {
+        "authorize": API_TOKEN
+    }
+    ws.send(json.dumps(auth_request))
+    print("Authorization request sent.")
+
+
+# Create a WebSocket connection
+ws = websocket.WebSocketApp(
+    URL,
+    on_message=on_message,
+    on_error=on_error,
+    on_close=on_close,
+    on_open=on_open
+)
+
+# Run the WebSocket connection
+ws.run_forever()
\ No newline at end of file
